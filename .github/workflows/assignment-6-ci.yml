name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run tsc
        id: tsc
        run: npm run tsc

      # - name: Run build
      #   id: build
      #   run: |
      #     EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "build_stderr<<$EOF" >> "$GITHUB_ENV"
      #     echo "$build_output" >> "$GITHUB_ENV"
      #     echo "$EOF" >> "$GITHUB_ENV"

      - name: save build log
        if: failure()
        run: |
          echo "## Build Log" > build_log.md
          echo '```' >> build_log.md
          cat build.log >> build_log.md
          echo '```' >> build_log.md

      - name: Post tsc/build error comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: build_log.md
          header: tsc build
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          # message: |
          #   ## tsc build results
          #   tsc stderr:
          #   ```
          #   ${{ env.tsc_stderr }}
          #   ${{ env.tsc_outputs.comment }}
          #   ```
          #   build stderr:
          #   ```
          #   ${{ env.build_stderr }}
          #   ${{ env.build_outputs }}
          #   ```

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Run ESLint
        run: npm run lint --workspace packages/assignment-6 > eslint-report.json
        continue-on-error: true
      - name: Upload ESLint report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: eslint-report
          path: eslint-report.json
      - name: Post ESLint error comment
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
        run: |
          curl -s -H "Authorization: token $TOKEN_FOR_CI" \
          -X POST \
          -d "{\"body\": \"Build failed! Please check the logs.\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Run Tests and Measure Coverage
        run: |
          npm run test --workspace packages/assignment-6 -- --coverage
      - name: Check Coverage Report
        run: cat packages/assignment-6/coverage/lcov-report/index.html
      - name: Post Test Coverage comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Test Coverage Report
          message: |
            **테스트 성공 ✅**

            **커버리지 결과**
            - 라인 커버리지: $(grep -Po 'Lines\s*\K[0-9]+\.[0-9]+%' packages/assignment-6/coverage/lcov-report/index.html)
            - 브랜치 커버리지: $(grep -Po 'Branches\s*\K[0-9]+\.[0-9]+%' packages/assignment-6/coverage/lcov-report/index.html)
            - 함수 커버리지: $(grep -Po 'Functions\s*\K[0-9]+\.[0-9]+%' packages/assignment-6/coverage/lcov-report/index.html)
            - 구문 커버리지: $(grep -Po 'Statements\s*\K[0-9]+\.[0-9]+%' packages/assignment-6/coverage/lcov-report/index.html)

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage --output=./lighthouse-results
        continue-on-error: true
      - name: Post Lighthouse Results
        if: always()
        run: |
          cat << EOF > lighthouse-results.md
          **Lighthouse 성능 측정 결과**

          | 카테고리 | 점수 |
          | --- | --- |
          | Performance | $(jq '.categories.performance.score * 100' < lighthouse-results/lhr.report.json)% |
          | Accessibility | $(jq '.categories.accessibility.score * 100' < lighthouse-results/lhr.report.json)% |
          | Best Practices | $(jq '.categories["best-practices"].score * 100' < lighthouse-results/lhr.report.json)% |
          | SEO | $(jq '.categories.seo.score * 100' < lighthouse-results/lhr.report.json)% |
          EOF
      - name: Post Lighthouse comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Lighthouse 성능 측정 결과
          message: file://lighthouse-results.md

  assign_reviewer:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
      - name: Set reviewer
        run: |
          REVIEWERS=("naturekim" "HM970506")
          RANDOM_REVIEWER=${REVIEWERS[$RANDOM % ${#REVIEWERS[@]}]}
          echo "random_reviewer=$RANDOM_REVIEWER" >> $GITHUB_ENV
      - name: Add reviewer to PR
        uses: actions/github-script@v5
        with:
          script: |
            const reviewer = process.env.random_reviewer;
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: [reviewer]
            });
      - name: Post reviewer mention comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: 리뷰어
          message: |
            @${{ env.random_reviewer }} 님, 리뷰를 부탁드립니다.
