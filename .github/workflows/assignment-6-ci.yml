name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm -F assignment-6 install

      - name: Run TypeScript compiler
        id: tsc
        run: |
          TSC_ERROR_OUTPUT=$(pnpm -F assignment-6 tsc 2>&1 || true)
          TSC_ERROR_OUTPUT="${TSC_ERROR_OUTPUT//'%'/'%25'}"
          TSC_ERROR_OUTPUT="${TSC_ERROR_OUTPUT//$'\n'/'%0A'}"
          TSC_ERROR_OUTPUT="${TSC_ERROR_OUTPUT//$'\r'/'%0D'}"
          echo "tsc_error_output=$TSC_ERROR_OUTPUT" >> $GITHUB_OUTPUT

      - name: Post tsc error comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: TypeScript Compiler Results
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## TypeScript Compiler Results
            ${{ steps.tsc.outputs.tsc_error_output }}

      - name: Run build
        id: build
        run: |
          ERROR_OUTPUT=$(pnpm -F assignment-6 build 2>&1 || true)
          ERROR_OUTPUT="${ERROR_OUTPUT//'%'/'%25'}"
          ERROR_OUTPUT="${ERROR_OUTPUT//$'\n'/'%0A'}"
          ERROR_OUTPUT="${ERROR_OUTPUT//$'\r'/'%0D'}"
          echo "error_output=$ERROR_OUTPUT" >> $GITHUB_OUTPUT

      - name: Post tsc/build error comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: build
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## Build results
            ${{ steps.build.outputs.error_output }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: packages/assignment-6/dist

      - name: Checkout repository
        uses: actions/checkout@v4

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm -F assignment-6 install

      - name: Run ESLint
        id: lint
        run: |
          LINT_ERROR_OUTPUT=$(pnpm -F assignment-6 run lint 2>&1 || true)
          LINT_ERROR_OUTPUT="${LINT_ERROR_OUTPUT//'%'/'%25'}"
          LINT_ERROR_OUTPUT="${LINT_ERROR_OUTPUT//$'\n'/'%0A'}"
          LINT_ERROR_OUTPUT="${LINT_ERROR_OUTPUT//$'\r'/'%0D'}"
          echo "lint_error_output=$LINT_ERROR_OUTPUT" >> $GITHUB_OUTPUT

      - name: Post lint error comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lint
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## ESLint results
            ${{ steps.lint.outputs.lint_error_output }}

      - name: Checkout repository
        uses: actions/checkout@v4

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm -F assignment-6 install

      - name: Run Tests and Measure Coverage
        run: pnpm -F assignment-6 test -- --coverage > test_output.txt

      - name: Extract Coverage Data
        id: coverage
        run: |
          echo "lines=$(grep -oP 'All files.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
          echo "statements=$(grep -oP 'All files.*?\|.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
          echo "functions=$(grep -oP 'All files.*?\|.*?\|.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT
          echo "branches=$(grep -oP 'All files.*?\|.*?\|.*?\|.*?\|\s*\K[0-9.]+(?=\s*\|)' test_output.txt)" >> $GITHUB_OUTPUT

      - name: Post Test Coverage comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Test Coverage Report
          message: |
            ## 테스트 성공 ✅
            **커버리지 결과**
            - 라인 커버리지: ${{ steps.coverage.outputs.lines }}%
            - 구문 커버리지: ${{ steps.coverage.outputs.statements }}%
            - 함수 커버리지: ${{ steps.coverage.outputs.functions }}%
            - 브랜치 커버리지: ${{ steps.coverage.outputs.branches }}%
      
      - name: Checkout repository
        uses: actions/checkout@v4

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
        working-directory: /packages/assignment-6

      - name: Start dev server
        run: pnpm start > server.log 2>&1 &
        working-directory: /packages/assignment-6
        env:
          PORT: 5173

      - name: Wait for dev server
        run: |
          echo "Waiting for dev server to start..."
          timeout=60
          elapsed=0
          while ! nc -z localhost 5173 && [ $elapsed -lt $timeout ]; do
            sleep 1
            elapsed=$((elapsed+1))
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout: Dev server did not start within ${timeout} seconds"
            echo "Server log:"
            cat server.log
            exit 1
          fi
          echo "Dev server is up and running"
        working-directory: /packages/assignment-6

      - name: Check server status
        run: |
          curl -I http://localhost:5173 || (echo "Server is not responding" && cat server.log && exit 1)
        working-directory: /packages/assignment-6

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci autorun --collect.url=http://localhost:5173 --upload.target=filesystem --upload.outputDir=/lighthouse-results
        working-directory: /packages/assignment-6
        continue-on-error: true

      - name: Debug - List Lighthouse results
        if: always()
        run: |
          echo "Contents of /lighthouse-results:"
          ls -la /lighthouse-results/

      - name: Post Lighthouse Results
        id: lighthouse
        if: always()
        run: |
          LATEST_REPORT=$(ls -t /lighthouse-results/*.report.json | head -n1)
          if [ -f "$LATEST_REPORT" ]; then
            echo "Using report file: $LATEST_REPORT"
            LIGHTHOUSE_RESULT=$(cat << EOF
          ## Lighthouse 성능 측정 결과

          | 카테고리 | 점수 |
          | --- | --- |
          | Performance | $(jq '.categories.performance.score * 100' < "$LATEST_REPORT")% |
          | Accessibility | $(jq '.categories.accessibility.score * 100' < "$LATEST_REPORT")% |
          | Best Practices | $(jq '.categories["best-practices"].score * 100' < "$LATEST_REPORT")% |
          | SEO | $(jq '.categories.seo.score * 100' < "$LATEST_REPORT")% |
          EOF
          )
            echo "result<<EOF" >> $GITHUB_OUTPUT
            echo "$LIGHTHOUSE_RESULT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "result=Lighthouse 결과 파일을 찾을 수 없습니다. (검색 경로: /lighthouse-results/*.report.json)" >> $GITHUB_OUTPUT
          fi

      - name: Post Lighthouse comment
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Lighthouse 성능 측정 결과
          message: ${{ steps.lighthouse.outputs.result }}

      - name: Checkout repository
        uses: actions/checkout@v4

  assign_reviewer:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Set reviewer
        run: |
          REVIEWERS=("naturekim" "HM970506")
          RANDOM_REVIEWER=${REVIEWERS[$RANDOM % ${#REVIEWERS[@]}]}
          echo "random_reviewer=$RANDOM_REVIEWER" >> $GITHUB_ENV

      - name: Post review request comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.TOKEN_FOR_CI}}
          script: |
            const reviewer = process.env.random_reviewer;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `@${reviewer} 님, 이 PR의 리뷰를 부탁드립니다.`
            });
