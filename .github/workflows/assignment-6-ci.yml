name: CI Assignment 6

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'packages/assignment-6/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm -F assignment-6 install

      - name: Run build
        id: build
        run: |
          ERROR_OUTPUT=$(pnpm -F assignment-6 build 2>&1 || true)
          ERROR_OUTPUT="${ERROR_OUTPUT//'%'/'%25'}"
          ERROR_OUTPUT="${ERROR_OUTPUT//$'\n'/'%0A'}"
          ERROR_OUTPUT="${ERROR_OUTPUT//$'\r'/'%0D'}"
          echo "error_output=$ERROR_OUTPUT" >> $GITHUB_OUTPUT

      - name: Post tsc/build error comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: tsc build
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## tsc build results
            tsc stderr:
            ```
            ${{ steps.build.outputs.error_output }}
            ```

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm -F assignment-6 install

      - name: Run ESLint
        id: lint
        run: |
          LINT_ERROR_OUTPUT=$(pnpm -F assignment-6 run lint 2>&1 || true)
          LINT_ERROR_OUTPUT="${LINT_ERROR_OUTPUT//'%'/'%25'}"
          LINT_ERROR_OUTPUT="${LINT_ERROR_OUTPUT//$'\n'/'%0A'}"
          LINT_ERROR_OUTPUT="${LINT_ERROR_OUTPUT//$'\r'/'%0D'}"
          echo "lint_error_output=$LINT_ERROR_OUTPUT" >> $GITHUB_OUTPUT

      - name: Post lint error comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lint
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          message: |
            ## lint results
            lint stderr:
            ```
            ${{ steps.lint.outputs.lint_error_output }}
            ```

  test:
    runs-on: ubuntu-latest
    steps:
      # ... (이전 단계들은 그대로 유지)

      - name: Run Tests and Measure Coverage
        run: pnpm -F assignment-6 test -- --coverage

      - name: Extract Coverage Data
        id: coverage
        run: |
          echo "lines=$(grep -Po 'Lines\s*:\s*\K[0-9]+\.[0-9]+(?=%)' packages/assignment-6/coverage/index.html)" >> $GITHUB_OUTPUT
          echo "branches=$(grep -Po 'Branches\s*:\s*\K[0-9]+\.[0-9]+(?=%)' packages/assignment-6/coverage/index.html)" >> $GITHUB_OUTPUT
          echo "functions=$(grep -Po 'Functions\s*:\s*\K[0-9]+\.[0-9]+(?=%)' packages/assignment-6/coverage/index.html)" >> $GITHUB_OUTPUT
          echo "statements=$(grep -Po 'Statements\s*:\s*\K[0-9]+\.[0-9]+(?=%)' packages/assignment-6/coverage/index.html)" >> $GITHUB_OUTPUT

      - name: Post Test Coverage comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Test Coverage Report
          message: |
            **테스트 성공 ✅**

            **커버리지 결과**
            - 라인 커버리지: ${{ steps.coverage.outputs.lines }}%
            - 브랜치 커버리지: ${{ steps.coverage.outputs.branches }}%
            - 함수 커버리지: ${{ steps.coverage.outputs.functions }}%
            - 구문 커버리지: ${{ steps.coverage.outputs.statements }}%

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install --legacy-peer-deps
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage --output=./lighthouse-results
        continue-on-error: true
      - name: Post Lighthouse Results
        if: always()
        run: |
          cat << EOF > lighthouse-results.md
          **Lighthouse 성능 측정 결과**

          | 카테고리 | 점수 |
          | --- | --- |
          | Performance | $(jq '.categories.performance.score * 100' < lighthouse-results/lhr.report.json)% |
          | Accessibility | $(jq '.categories.accessibility.score * 100' < lighthouse-results/lhr.report.json)% |
          | Best Practices | $(jq '.categories["best-practices"].score * 100' < lighthouse-results/lhr.report.json)% |
          | SEO | $(jq '.categories.seo.score * 100' < lighthouse-results/lhr.report.json)% |
          EOF
      - name: Post Lighthouse comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: Lighthouse 성능 측정 결과
          message: file://lighthouse-results.md

  assign_reviewer:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.x'
      - name: Set reviewer
        run: |
          REVIEWERS=("naturekim" "HM970506")
          RANDOM_REVIEWER=${REVIEWERS[$RANDOM % ${#REVIEWERS[@]}]}
          echo "random_reviewer=$RANDOM_REVIEWER" >> $GITHUB_ENV
      - name: Add reviewer to PR
        uses: actions/github-script@v5
        with:
          script: |
            const reviewer = process.env.random_reviewer;
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: [reviewer]
            });
      - name: Post reviewer mention comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN_FOR_CI }}
          header: 리뷰어
          message: |
            @${{ env.random_reviewer }} 님, 리뷰를 부탁드립니다.
